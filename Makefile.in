

# Panda 0.2 Makefile

# These are used to define where we would like to be installed to
prefix=/usr/local
exec_prefix=${prefix}

# Use the debug flag to help debug the program. It won't produce valid PDF
# files though...
DODEBUG = NO
#DODEBUG = DEBUG

# This is used to do the Windows specific I/O things we have to do.
# this is now defined by the configure script. If you don't use that script,
# then you will need to uncomment one of these lines below.
#PLATFORM = WINDOWS
#PLATFORM = LINUX

# The first one of these will make a profiling library
#PROFILING = -pg
PROFILING = 

# Use dmalloc to find memory allocation bugs?
DMALLOC = NO
#DMALLOC = DMALLOC -ldmalloc

# Do we optomise?
OPTO = 
#OPTO = -O3

# The includes can be found in a few places
INCLOCS = -I/usr/include -I/usr/local/include

# If you are not using autoconf then this will need to be manually set
COMPILER = @CC@

COMPILER_FLAGS = -g -c -D@PLATFORM@ -D$(DODEBUG) -D$(DMALLOC) -Wall $(PROFILING) $(OPTO) $(INCLOCS)

# Main is excluded from here for the benefit of the tests and the library
OBJFILES = date.o error.o font.o images.o info.o objects.o panda.o text.o trailer.o utility.o xref.o

# Build panda (including the sample application) -- <at>LIBS<at>
# (@LIBS@)
# is the autoconf variable for the library path and for the names of the 
# libraries we need. See configure.in for a list of the libraries we need at 
# the moment...
all:		$(OBJFILES) main.o
		gcc $(OBJFILES) @LIBS@ -D$(DMALLOC) main.o -o panda

# This makes the archive that is the panda library. It is not installed by this
# set of commands though, that needs a make install... The ar command is
# quite interesting, read the man page for more information...
lib:		$(OBJFILES)
		ar rs libpanda.a $(OBJFILES)

# This installs the library and header files in the right places
# I would have used -b here as well, but it is not supported on FreeBSD...
install:	lib
		@INSTALL@ -m 664 libpanda.a @libdir@/libpanda.a
		@INSTALL@ -m 664 -d @includedir@/panda
		@INSTALL@ -m 664 -D *.h @includedir@/panda/
		@INSTALL@ -m 664 -d @mandir@/man3
		@INSTALL@ -m 664 -D man/*.3 @mandir@/man3

# This is used in my testing of make install. It does not uninstall the man
# pages yet because I am not sure of the neatest way of doing this just yet...
uninstall:	
		rm -i @libdir@libpanda*
		rm -ri @includedir@/panda

# Clean up
clean:	
		rm -i *.o
		rm -i panda
		rm -i libpanda.a
		rm -i configure
		rm -i lexer.tab.c
		rm -i lexer.tab.h
		rm -rf mctemp

# Remove all the caching stuff from the configure script so we can run it again
distclean:
		rm -i config.cache
		rm -i config.status
		rm -i config.log
		rm -i Makefile

###############################################################################

date.o:		date.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) date.c -o date.o

error.o:	error.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) error.c -o error.o

font.o:		font.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) font.c -o font.o

images.o:       images.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) images.c -o images.o

info.o:		info.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) info.c -o info.o

main.o:		main.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) main.c -o main.o

objects.o:	objects.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) objects.c -o objects.o

panda.o:	panda.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) panda.c -o panda.o

text.o:		text.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) text.c -o text.o

trailer.o:	trailer.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) trailer.c -o trailer.o

utility.o:	utility.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) utility.c -o utility.o

xref.o:		xref.c constants.h functions.h objects.h Makefile
		$(COMPILER) $(COMPILER_FLAGS) xref.c -o xref.o

###########################################################################

lexer:	lexer.y lexer.l $(OBJFILES)
	bison -d lexer.y
	flex -olexer.c lexer.l
	$(COMPILER) lexer.tab.c lexer.c @LIBS@ -D$(DMALLOC) -o lexical -lfl $(OBJFILES)

fail:   lex
	./lexical < tests/object_simple.txt
	./lexical < tests/object_single_dict.txt
	./lexical < tests/object_several_dict.txt
	./lexical < tests/object_empty_stream.txt
	./lexical < tests/object_ascii_stream.txt
	./lexical < tests/object_binary_stream.txt
	./lexical < tests/object_real_object.txt
	./lexical < tests/pdf_no_xref.txt

test:	lex
	./lexical < tests/input_1.pdf